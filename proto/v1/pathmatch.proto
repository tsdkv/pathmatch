syntax = "proto3";

package pathmatch.v1;

option go_package = "github.com/tsdkv/pathmatch/pathmatchpb/v1;pathmatchpb";

// PathTemplate defines the abstract syntax tree (AST) for a parsed path pattern.
// This structure is used to store and interpret path matching rules.
//
// The grammar for path templates can be summarized as:
// Template = "/" [ Segments ] ;
// Segments = Segment { "/" Segment } ;
// Segment  = "*" | "**" | LITERAL | Variable ;
// Variable = "{" LITERAL [ "=" Segments ] "}" ;  // LITERAL here is the variable name
//
// Examples:
// - /users/{id}/profile
// - /files/**
// - /archive/{year}/{month=**}
// - /v1/books/{book_id}
// - /
message PathTemplate {
  // The path template is represented as a sequence of segments.
  repeated Segment segments = 1;
}

// Segment represents a single component of a path template.
message Segment {
  oneof segment {
    Literal literal = 1;
    Variable variable = 2;
    Star star = 3;
    DoubleStar double_star = 4;
  }
}

// Literal represents a fixed string segment in a path.
message Literal {
  // The string value of the literal segment.
  // e.g., "users", "profile".
  string value = 1;
}

// Variable represents a named placeholder in a path template.
// It can match a single segment (e.g., "{id}") or multiple segments
// if a sub-pattern is defined (e.g., "{filePath=/docs/**}").
//
// Limitations:
// - Nested variables (e.g., "{outer={inner}}") are not allowed.
// - The sub-pattern defined after '=' (e.g., in "{name=pattern}") cannot itself
//   contain variables. It can only contain literals, single wildcards ('*'),
//   or a double wildcard ('**') at the very end of the pattern.
message Variable {
  // The name of the variable, e.g., "id" in "{id}".
  string name = 1;

  // Optional. If present, defines a sub-pattern that the variable must match.
  // e.g., for "{filePath=/docs/**}", segments would represent "/docs/**".
  // If the variable is simple (e.g., "{id}"), this list will be empty.
  repeated Segment segments = 2; // e.g. "foo/*" or "**"
}

// Star represents a single-segment wildcard character ('*').
// It matches exactly one segment in the path.
message Star {
  // Example: In "/users/*/profile", '*' is a Star segment.
}

// DoubleStar represents a multi-segment wildcard character ('**').
// It matches zero or more path segments.
// It must be the last segment in the main path template or in a variable's sub-pattern.
message DoubleStar {
  // Example: In "/files/**", '**' is a DoubleStar segment.
  // In "/data/{rest=**}", the pattern for "rest" uses a DoubleStar.
}
