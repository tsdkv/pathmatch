// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: proto/v1/pathmatch.proto

package pathmatchpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// PathTemplate defines the abstract syntax tree (AST) for a parsed path pattern.
// This structure is used to store and interpret path matching rules.
//
// The grammar for path templates can be summarized as:
// Template = "/" [ Segments ] ;
// Segments = Segment { "/" Segment } ;
// Segment  = "*" | "**" | LITERAL | Variable ;
// Variable = "{" LITERAL [ "=" Segments ] "}" ;  // LITERAL here is the variable name
//
// Examples:
// - /users/{id}/profile
// - /files/**
// - /archive/{year}/{month=**}
// - /v1/books/{book_id}
// - /
type PathTemplate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The path template is represented as a sequence of segments.
	Segments      []*Segment `protobuf:"bytes,1,rep,name=segments,proto3" json:"segments,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PathTemplate) Reset() {
	*x = PathTemplate{}
	mi := &file_proto_v1_pathmatch_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PathTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathTemplate) ProtoMessage() {}

func (x *PathTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_pathmatch_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathTemplate.ProtoReflect.Descriptor instead.
func (*PathTemplate) Descriptor() ([]byte, []int) {
	return file_proto_v1_pathmatch_proto_rawDescGZIP(), []int{0}
}

func (x *PathTemplate) GetSegments() []*Segment {
	if x != nil {
		return x.Segments
	}
	return nil
}

// Segment represents a single component of a path template.
type Segment struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Segment:
	//
	//	*Segment_Literal
	//	*Segment_Variable
	//	*Segment_Star
	//	*Segment_DoubleStar
	Segment       isSegment_Segment `protobuf_oneof:"segment"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Segment) Reset() {
	*x = Segment{}
	mi := &file_proto_v1_pathmatch_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Segment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Segment) ProtoMessage() {}

func (x *Segment) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_pathmatch_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Segment.ProtoReflect.Descriptor instead.
func (*Segment) Descriptor() ([]byte, []int) {
	return file_proto_v1_pathmatch_proto_rawDescGZIP(), []int{1}
}

func (x *Segment) GetSegment() isSegment_Segment {
	if x != nil {
		return x.Segment
	}
	return nil
}

func (x *Segment) GetLiteral() *Literal {
	if x != nil {
		if x, ok := x.Segment.(*Segment_Literal); ok {
			return x.Literal
		}
	}
	return nil
}

func (x *Segment) GetVariable() *Variable {
	if x != nil {
		if x, ok := x.Segment.(*Segment_Variable); ok {
			return x.Variable
		}
	}
	return nil
}

func (x *Segment) GetStar() *Star {
	if x != nil {
		if x, ok := x.Segment.(*Segment_Star); ok {
			return x.Star
		}
	}
	return nil
}

func (x *Segment) GetDoubleStar() *DoubleStar {
	if x != nil {
		if x, ok := x.Segment.(*Segment_DoubleStar); ok {
			return x.DoubleStar
		}
	}
	return nil
}

type isSegment_Segment interface {
	isSegment_Segment()
}

type Segment_Literal struct {
	Literal *Literal `protobuf:"bytes,1,opt,name=literal,proto3,oneof"`
}

type Segment_Variable struct {
	Variable *Variable `protobuf:"bytes,2,opt,name=variable,proto3,oneof"`
}

type Segment_Star struct {
	Star *Star `protobuf:"bytes,3,opt,name=star,proto3,oneof"`
}

type Segment_DoubleStar struct {
	DoubleStar *DoubleStar `protobuf:"bytes,4,opt,name=double_star,json=doubleStar,proto3,oneof"`
}

func (*Segment_Literal) isSegment_Segment() {}

func (*Segment_Variable) isSegment_Segment() {}

func (*Segment_Star) isSegment_Segment() {}

func (*Segment_DoubleStar) isSegment_Segment() {}

// Literal represents a fixed string segment in a path.
type Literal struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The string value of the literal segment.
	// e.g., "users", "profile".
	Value         string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Literal) Reset() {
	*x = Literal{}
	mi := &file_proto_v1_pathmatch_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Literal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Literal) ProtoMessage() {}

func (x *Literal) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_pathmatch_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Literal.ProtoReflect.Descriptor instead.
func (*Literal) Descriptor() ([]byte, []int) {
	return file_proto_v1_pathmatch_proto_rawDescGZIP(), []int{2}
}

func (x *Literal) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Variable represents a named placeholder in a path template.
// It can match a single segment (e.g., "{id}") or multiple segments
// if a sub-pattern is defined (e.g., "{filePath=/docs/**}").
//
// Limitations:
//   - Nested variables (e.g., "{outer={inner}}") are not allowed.
//   - The sub-pattern defined after '=' (e.g., in "{name=pattern}") cannot itself
//     contain variables. It can only contain literals, single wildcards ('*'),
//     or a double wildcard ('**') at the very end of the pattern.
type Variable struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the variable, e.g., "id" in "{id}".
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optional. If present, defines a sub-pattern that the variable must match.
	// e.g., for "{filePath=/docs/**}", segments would represent "/docs/**".
	// If the variable is simple (e.g., "{id}"), this list will be empty.
	Segments      []*Segment `protobuf:"bytes,2,rep,name=segments,proto3" json:"segments,omitempty"` // e.g. "foo/*" or "**"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Variable) Reset() {
	*x = Variable{}
	mi := &file_proto_v1_pathmatch_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Variable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Variable) ProtoMessage() {}

func (x *Variable) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_pathmatch_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Variable.ProtoReflect.Descriptor instead.
func (*Variable) Descriptor() ([]byte, []int) {
	return file_proto_v1_pathmatch_proto_rawDescGZIP(), []int{3}
}

func (x *Variable) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Variable) GetSegments() []*Segment {
	if x != nil {
		return x.Segments
	}
	return nil
}

// Star represents a single-segment wildcard character ('*').
// It matches exactly one segment in the path.
type Star struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Star) Reset() {
	*x = Star{}
	mi := &file_proto_v1_pathmatch_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Star) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Star) ProtoMessage() {}

func (x *Star) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_pathmatch_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Star.ProtoReflect.Descriptor instead.
func (*Star) Descriptor() ([]byte, []int) {
	return file_proto_v1_pathmatch_proto_rawDescGZIP(), []int{4}
}

// DoubleStar represents a multi-segment wildcard character ('**').
// It matches zero or more path segments.
// It must be the last segment in the main path template or in a variable's sub-pattern.
type DoubleStar struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DoubleStar) Reset() {
	*x = DoubleStar{}
	mi := &file_proto_v1_pathmatch_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DoubleStar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoubleStar) ProtoMessage() {}

func (x *DoubleStar) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_pathmatch_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoubleStar.ProtoReflect.Descriptor instead.
func (*DoubleStar) Descriptor() ([]byte, []int) {
	return file_proto_v1_pathmatch_proto_rawDescGZIP(), []int{5}
}

var File_proto_v1_pathmatch_proto protoreflect.FileDescriptor

const file_proto_v1_pathmatch_proto_rawDesc = "" +
	"\n" +
	"\x18proto/v1/pathmatch.proto\x12\fpathmatch.v1\"A\n" +
	"\fPathTemplate\x121\n" +
	"\bsegments\x18\x01 \x03(\v2\x15.pathmatch.v1.SegmentR\bsegments\"\xe4\x01\n" +
	"\aSegment\x121\n" +
	"\aliteral\x18\x01 \x01(\v2\x15.pathmatch.v1.LiteralH\x00R\aliteral\x124\n" +
	"\bvariable\x18\x02 \x01(\v2\x16.pathmatch.v1.VariableH\x00R\bvariable\x12(\n" +
	"\x04star\x18\x03 \x01(\v2\x12.pathmatch.v1.StarH\x00R\x04star\x12;\n" +
	"\vdouble_star\x18\x04 \x01(\v2\x18.pathmatch.v1.DoubleStarH\x00R\n" +
	"doubleStarB\t\n" +
	"\asegment\"\x1f\n" +
	"\aLiteral\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\"Q\n" +
	"\bVariable\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x121\n" +
	"\bsegments\x18\x02 \x03(\v2\x15.pathmatch.v1.SegmentR\bsegments\"\x06\n" +
	"\x04Star\"\f\n" +
	"\n" +
	"DoubleStarB7Z5github.com/tsdkv/pathmatch/pathmatchpb/v1;pathmatchpbb\x06proto3"

var (
	file_proto_v1_pathmatch_proto_rawDescOnce sync.Once
	file_proto_v1_pathmatch_proto_rawDescData []byte
)

func file_proto_v1_pathmatch_proto_rawDescGZIP() []byte {
	file_proto_v1_pathmatch_proto_rawDescOnce.Do(func() {
		file_proto_v1_pathmatch_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_v1_pathmatch_proto_rawDesc), len(file_proto_v1_pathmatch_proto_rawDesc)))
	})
	return file_proto_v1_pathmatch_proto_rawDescData
}

var file_proto_v1_pathmatch_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_proto_v1_pathmatch_proto_goTypes = []any{
	(*PathTemplate)(nil), // 0: pathmatch.v1.PathTemplate
	(*Segment)(nil),      // 1: pathmatch.v1.Segment
	(*Literal)(nil),      // 2: pathmatch.v1.Literal
	(*Variable)(nil),     // 3: pathmatch.v1.Variable
	(*Star)(nil),         // 4: pathmatch.v1.Star
	(*DoubleStar)(nil),   // 5: pathmatch.v1.DoubleStar
}
var file_proto_v1_pathmatch_proto_depIdxs = []int32{
	1, // 0: pathmatch.v1.PathTemplate.segments:type_name -> pathmatch.v1.Segment
	2, // 1: pathmatch.v1.Segment.literal:type_name -> pathmatch.v1.Literal
	3, // 2: pathmatch.v1.Segment.variable:type_name -> pathmatch.v1.Variable
	4, // 3: pathmatch.v1.Segment.star:type_name -> pathmatch.v1.Star
	5, // 4: pathmatch.v1.Segment.double_star:type_name -> pathmatch.v1.DoubleStar
	1, // 5: pathmatch.v1.Variable.segments:type_name -> pathmatch.v1.Segment
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_proto_v1_pathmatch_proto_init() }
func file_proto_v1_pathmatch_proto_init() {
	if File_proto_v1_pathmatch_proto != nil {
		return
	}
	file_proto_v1_pathmatch_proto_msgTypes[1].OneofWrappers = []any{
		(*Segment_Literal)(nil),
		(*Segment_Variable)(nil),
		(*Segment_Star)(nil),
		(*Segment_DoubleStar)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_v1_pathmatch_proto_rawDesc), len(file_proto_v1_pathmatch_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_v1_pathmatch_proto_goTypes,
		DependencyIndexes: file_proto_v1_pathmatch_proto_depIdxs,
		MessageInfos:      file_proto_v1_pathmatch_proto_msgTypes,
	}.Build()
	File_proto_v1_pathmatch_proto = out.File
	file_proto_v1_pathmatch_proto_goTypes = nil
	file_proto_v1_pathmatch_proto_depIdxs = nil
}
